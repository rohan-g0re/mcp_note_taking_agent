

"""
currently, we will build a simple agent and then later wrap 
it in a mcp server.
"""

import asyncio
from datetime import datetime
from typing import Optional, List


class NoteTakingAgent: 

    def __init__(self):
        self.conversation_history = []
        print("🤖 MCP Notetaking Agent initialized!")

    async def ask_question(self, question: str) -> str:
        """
        Processes a question and get a response.
        """

        answer = "This is a test answer"

        return answer
    
    async def save_note (self, question: str, answer: str, tags: Optional[List[str]] = None) -> str:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"note_{timestamp}.md"

                # Create markdown content
        markdown_content = f"""# Note - {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## Question
{question}

## Answer  
{answer}

## Metadata
- **Created**: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
- **Tags**: {tags or ['general']}
- **Type**: Q&A Note

---
*Generated by MCP Notetaking Agent*
"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            print(f"💾 Note saved as: {filename}")
            return f"Note saved successfully as {filename}"
        except Exception as e:
            print(f"❌ Error saving note: {e}")
            return f"Error saving note: {e}"
        

    
    def list_recent_notes(self, limit: int = 5) -> list:
        """
        Get recent conversation history.
        
        MCP CONCEPT: This will become an MCP "RESOURCE"
        - Resources are data that AI models can access
        - Our conversation history becomes accessible to any MCP client
        """
        recent = self.conversation_history[-limit:] if self.conversation_history else []
        print(f"📋 Retrieved {len(recent)} recent notes")
        return recent








# --------------------------------


# Simple CLI for testing
async def main():
    """
    Simple test of our agent before we wrap it in MCP.
    
    MCP LEARNING: 
    - This shows our agent working standalone
    - Next phases will wrap this in MCP protocol
    - Then ANY MCP client can use these exact same functions!
    """
    agent = NoteTakingAgent()
    
    print("\n🎯 MCP Notetaking Agent - Phase 1 Demo")
    print("=" * 50)
    print("Let's test our basic functionality before building the MCP server!")
    
    # Test 1: Ask about MCP
    print("\n🧪 Test 1: Asking about MCP")
    answer1 = await agent.ask_question("What is MCP and why is it useful?")
    print(f"Answer: {answer1[:100]}...")
    
    # Test 2: Save the note
    print("\n🧪 Test 2: Saving note")
    save_result = await agent.save_note(
        "What is MCP and why is it useful?", 
        answer1, 
        ["mcp", "learning", "protocol"]
    )
    print(f"Save result: {save_result}")
    
    # Test 3: Ask another question
    print("\n🧪 Test 3: Another question")
    answer2 = await agent.ask_question("How will this become an MCP server?")
    save_result2 = await agent.save_note(
        "How will this become an MCP server?",
        answer2,
        ["mcp", "development"]
    )
    
    # Test 4: List recent notes
    print("\n🧪 Test 4: List recent notes")
    recent = agent.list_recent_notes()
    for i, note in enumerate(recent, 1):
        print(f"{i}. {note['timestamp']}: {note['question'][:50]}...")
    
    print("\n✅ Phase 1 Complete!")
    print("Next: We'll wrap these functions in an MCP server")
    print("Then Claude, Cursor, etc. can use them directly!")

if __name__ == "__main__":
    asyncio.run(main())